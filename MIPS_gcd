
# Program to implement the Dijkstra's GCD algorithm

	.data		# variable declarations follow this line
str1: 	.asciiz "Enter the first integer: "
str2: 	.asciiz "Enter the second integer: " 
str3: .asciiz "The GSM is:  "
line: .asciiz "\n"                 
														
	.text		# instructions follow this line	
	
main:     		# indicates start of code to test lcm the procedure
			
		la $a0, str1           
   		li $v0, 4              
    		syscall                

    		li $v0, 5             
    		syscall                
    		add $a1, $v0, $zero    

    		la $a0, str2           
    		li $v0, 4              
    		syscall                

    		li $v0, 5              
  		syscall                
   		add $a2, $v0, $zero    
			
		addi $sp, $sp, -8      
    		sw $a1, 4($sp)         
    		sw $a2, 0($sp)        
    		jal gcd                # jump gcd
    		lw $a2, 0($sp)         
    		lw $a1, 4($sp)         
    		addi $sp, $sp, 4      
    		add $s0, $v0, $zero    # gcd
    		sw $s0, 0($sp)         # save result															                    
		la $a0, str3           
    		li $v0, 4              
    		syscall                # output str3
    		li $v0, 1              
    		add $a0, $s0, $zero    
    		syscall                
    		
    		la $a0, line           
    		li $v0, 4              
    		syscall                # output \n

    		li $v0, 10             
    		syscall                # terminate program 
																	                    																	                    															                    																	                    
																	                    																	                    																	                    																	                    
gcd:	     		# the “gcm” procedure
		addi $sp, $sp, -8      
    		sw $ra, 4($sp)         #return address

   		div $a1, $a2           
   		mfhi $s0               
    		sw $s0, 0($sp)         # save remainder
    		bne $s0, $zero, L1     

    		add $v0, $a2, $zero   
    		addi $sp, $sp, 8      
    		jr $ra                # return

L1:
    		add $a1, $a2, $zero   
    		lw $s0, 0($sp)        
    		add $a2, $s0, $zero   
    		jal gcd              

    		lw $ra, 4($sp)        
    		addi $sp, $sp, 8      
    		jr $ra                
									
# End of program
